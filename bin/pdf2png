#!/bin/bash

if is available basher; then
    include "hagenw/simply-bash" "lib/units.sh"
else
    include "lib/units.sh"
fi

readonly PROGNAME=$(basename "$0")
readonly ARGS=("$@")

usage() {
    cat <<- EOF
	Usage: ${PROGNAME} [OPTIONS] FILE

	Generate a thumbnail of the given PDF file.

	Options:
	    -r --resolution     resolution of PDF in ppi
	                        default: 300
	    -s --max-size       maximum size of width or height of the PNG in px
	                        default: 800
	    -p --page           page of the PDF used for thumbnail
	                        default: 1
	    -o --output         name of the PNG file
	                        default: same as PDF file, but with s/pdf/png/
	    -h --help           show this help
	EOF
}

main() {
    local resolution_in_ppi maxsize_in_px page outfile current_size options

    cmdline "${ARGS[@]}"

    resolution_in_ppi=${RESOLUTION:-300}
    maxsize_in_px=${MAXSIZE:-800}
    page=${PAGE:-1}
    outfile=${OUTFILE:-${INFILE%.pdf}.png}

    current_size=$(max_size_of_pdf "${INFILE}" "${resolution_in_ppi}")

    if is gt "${current_size}" "${maxsize_in_px}"; then
        options="-f ${page} -r ${resolution_in_ppi} -scale-to ${maxsize_in_px}"
    else
        options="-f ${page} -r ${resolution_in_ppi}"
    fi

    pdf_to_png "${options}" "${INFILE}" "${outfile}"

    compress "${outfile}"

    return
}

# Parse arguments
# (http://bit.ly/defensive-bash) (http://bit.ly/getopts_tutorial)
# $@ - all parameters given to the script
cmdline() {
    local arg=

    for arg; do
        case "${arg}" in
            # Translate --gnu-long-options to -g (short options)
            --help)         args="${args}-h " ;;
            --max-size)     args="${args}-s " ;;
            --resolution)   args="${args}-r " ;;
            --output)       args="${args}-o " ;;
            --page)         args="${args}-p " ;;
            --*)            error "Unknown option $arg"; exit 1 ;;
            *)              # Pass through anything else
                            is equal "${arg:0:1}" "-" || arg="\"${arg}\""
                            args="${args}${arg} "
                            ;;
        esac
    done

    # Reset $@ to the short options
    eval set -- "${args}"

    while getopts ':hs:r:o:p:' arg; do
        case "${arg}" in
            h)  usage && exit 0 ;;
            s)  readonly MAXSIZE=${OPTARG} ;;
            r)  readonly RESOLUTION=${OPTARG} ;;
            o)  readonly OUTFILE=${OPTARG} ;;
            p)  readonly PAGE=${OPTARG} ;;
            :)  error "-${OPTARG} needs an argument"; exit 1 ;;
            *)  error "Unknown option -${OPTARG}";exit 1 ;;
        esac
    done
    shift $((OPTIND-1))  # remove all options from $@

    # Handle non parameter arguments
    if is not equal $# 1; then
        error "Exactly one pdf file has to be given."
        exit 1
    fi
    readonly INFILE=$1

    return 0
}

# $1 - PDF filename
# $2 - resolution in ppi
max_size_of_pdf() {
    local pdf_file=$1
    local resolution_in_ppi=$2
    local max_size_in_pt
    local max_size_in_px

    max_size_in_pt=$(pdfinfo "${pdf_file}" \
                   | awk '/Page size/{ if ($3>$5) print $3; else print $5 }')

    max_size_in_px=$(units::pt_to_px "${max_size_in_pt}" "${resolution_in_ppi}")

    echo "${max_size_in_px}"
}

# $1 - options passed to pdftoppm
# $2 - PDF filename
# $3 - PNG filename
pdf_to_png() {
    local options=($1)
    local pdf_file=$2
    local png_file=$3

    pdftoppm -singlefile -aa yes -aaVector yes -png "${options[@]}" \
        "${pdf_file}" > "${png_file}"
}

# $1 - PNG filename
compress() {
    local png_file=$1

    if is available zopflipng; then
        zopflipng -y "${png_file}" "${png_file}" >/dev/null
        return $?
    else
        warning 'Install zpflipng to achieve smaller png files'
    fi
}


main
